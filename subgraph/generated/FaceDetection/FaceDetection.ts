// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class FaceDetected extends ethereum.Event {
  get params(): FaceDetected__Params {
    return new FaceDetected__Params(this);
  }
}

export class FaceDetected__Params {
  _event: FaceDetected;

  constructor(event: FaceDetected) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get imageId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get distance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ImageUploaded extends ethereum.Event {
  get params(): ImageUploaded__Params {
    return new ImageUploaded__Params(this);
  }
}

export class ImageUploaded__Params {
  _event: ImageUploaded;

  constructor(event: ImageUploaded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get imageId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MetadataAccessed extends ethereum.Event {
  get params(): MetadataAccessed__Params {
    return new MetadataAccessed__Params(this);
  }
}

export class MetadataAccessed__Params {
  _event: MetadataAccessed;

  constructor(event: MetadataAccessed) {
    this._event = event;
  }

  get imageId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get accessor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get locationX(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get locationY(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class FaceDetection__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class FaceDetection__faceDetectionInputInputVectorStruct extends ethereum.Tuple {
  get data(): Bytes {
    return this[0].toBytes();
  }

  get securityZone(): i32 {
    return this[1].toI32();
  }
}

export class FaceDetection__metadataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getLocationX(): BigInt {
    return this.value0;
  }

  getLocationY(): BigInt {
    return this.value1;
  }

  getTimestamp(): BigInt {
    return this.value2;
  }

  getUploader(): Address {
    return this.value3;
  }
}

export class FaceDetection__usersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getLocationX(): BigInt {
    return this.value0;
  }

  getLocationY(): BigInt {
    return this.value1;
  }

  getAlertDistance(): BigInt {
    return this.value2;
  }

  getUploadedImagesCount(): BigInt {
    return this.value3;
  }

  getRewards(): BigInt {
    return this.value4;
  }
}

export class FaceDetection extends ethereum.SmartContract {
  static bind(address: Address): FaceDetection {
    return new FaceDetection("FaceDetection", address);
  }

  eip712Domain(): FaceDetection__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new FaceDetection__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<FaceDetection__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FaceDetection__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  faceDetection(
    imageId: BigInt,
    inputVector: Array<FaceDetection__faceDetectionInputInputVectorStruct>,
  ): i32 {
    let result = super.call(
      "faceDetection",
      "faceDetection(uint256,(bytes,int32)[16]):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(imageId),
        ethereum.Value.fromTupleArray(inputVector),
      ],
    );

    return result[0].toI32();
  }

  try_faceDetection(
    imageId: BigInt,
    inputVector: Array<FaceDetection__faceDetectionInputInputVectorStruct>,
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "faceDetection",
      "faceDetection(uint256,(bytes,int32)[16]):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(imageId),
        ethereum.Value.fromTupleArray(inputVector),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  images(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call("images", "images(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ]);

    return result[0].toBigInt();
  }

  try_images(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("images", "images(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metadata(param0: BigInt): FaceDetection__metadataResult {
    let result = super.call(
      "metadata",
      "metadata(uint256):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new FaceDetection__metadataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
    );
  }

  try_metadata(
    param0: BigInt,
  ): ethereum.CallResult<FaceDetection__metadataResult> {
    let result = super.tryCall(
      "metadata",
      "metadata(uint256):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FaceDetection__metadataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
      ),
    );
  }

  users(param0: Address): FaceDetection__usersResult {
    let result = super.call(
      "users",
      "users(address):(int256,int256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new FaceDetection__usersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_users(param0: Address): ethereum.CallResult<FaceDetection__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(int256,int256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FaceDetection__usersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AccessMetadataCall extends ethereum.Call {
  get inputs(): AccessMetadataCall__Inputs {
    return new AccessMetadataCall__Inputs(this);
  }

  get outputs(): AccessMetadataCall__Outputs {
    return new AccessMetadataCall__Outputs(this);
  }
}

export class AccessMetadataCall__Inputs {
  _call: AccessMetadataCall;

  constructor(call: AccessMetadataCall) {
    this._call = call;
  }

  get imageId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AccessMetadataCall__Outputs {
  _call: AccessMetadataCall;

  constructor(call: AccessMetadataCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }

  get value1(): i32 {
    return this._call.outputValues[1].value.toI32();
  }

  get value2(): i32 {
    return this._call.outputValues[2].value.toI32();
  }
}

export class FaceDetectionCall extends ethereum.Call {
  get inputs(): FaceDetectionCall__Inputs {
    return new FaceDetectionCall__Inputs(this);
  }

  get outputs(): FaceDetectionCall__Outputs {
    return new FaceDetectionCall__Outputs(this);
  }
}

export class FaceDetectionCall__Inputs {
  _call: FaceDetectionCall;

  constructor(call: FaceDetectionCall) {
    this._call = call;
  }

  get imageId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get inputVector(): Array<FaceDetectionCallInputVectorStruct> {
    return this._call.inputValues[1].value.toTupleArray<FaceDetectionCallInputVectorStruct>();
  }
}

export class FaceDetectionCall__Outputs {
  _call: FaceDetectionCall;

  constructor(call: FaceDetectionCall) {
    this._call = call;
  }

  get distance(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class FaceDetectionCallInputVectorStruct extends ethereum.Tuple {
  get data(): Bytes {
    return this[0].toBytes();
  }

  get securityZone(): i32 {
    return this[1].toI32();
  }
}

export class UpdateUserLocationCall extends ethereum.Call {
  get inputs(): UpdateUserLocationCall__Inputs {
    return new UpdateUserLocationCall__Inputs(this);
  }

  get outputs(): UpdateUserLocationCall__Outputs {
    return new UpdateUserLocationCall__Outputs(this);
  }
}

export class UpdateUserLocationCall__Inputs {
  _call: UpdateUserLocationCall;

  constructor(call: UpdateUserLocationCall) {
    this._call = call;
  }

  get x(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateUserLocationCall__Outputs {
  _call: UpdateUserLocationCall;

  constructor(call: UpdateUserLocationCall) {
    this._call = call;
  }
}

export class UploadImageCall extends ethereum.Call {
  get inputs(): UploadImageCall__Inputs {
    return new UploadImageCall__Inputs(this);
  }

  get outputs(): UploadImageCall__Outputs {
    return new UploadImageCall__Outputs(this);
  }
}

export class UploadImageCall__Inputs {
  _call: UploadImageCall;

  constructor(call: UploadImageCall) {
    this._call = call;
  }

  get locationX(): UploadImageCallLocationXStruct {
    return changetype<UploadImageCallLocationXStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get locationY(): UploadImageCallLocationYStruct {
    return changetype<UploadImageCallLocationYStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get timestamp(): UploadImageCallTimestampStruct {
    return changetype<UploadImageCallTimestampStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class UploadImageCall__Outputs {
  _call: UploadImageCall;

  constructor(call: UploadImageCall) {
    this._call = call;
  }
}

export class UploadImageCallLocationXStruct extends ethereum.Tuple {
  get data(): Bytes {
    return this[0].toBytes();
  }

  get securityZone(): i32 {
    return this[1].toI32();
  }
}

export class UploadImageCallLocationYStruct extends ethereum.Tuple {
  get data(): Bytes {
    return this[0].toBytes();
  }

  get securityZone(): i32 {
    return this[1].toI32();
  }
}

export class UploadImageCallTimestampStruct extends ethereum.Tuple {
  get data(): Bytes {
    return this[0].toBytes();
  }

  get securityZone(): i32 {
    return this[1].toI32();
  }
}

export class UploadImageChunkCall extends ethereum.Call {
  get inputs(): UploadImageChunkCall__Inputs {
    return new UploadImageChunkCall__Inputs(this);
  }

  get outputs(): UploadImageChunkCall__Outputs {
    return new UploadImageChunkCall__Outputs(this);
  }
}

export class UploadImageChunkCall__Inputs {
  _call: UploadImageChunkCall;

  constructor(call: UploadImageChunkCall) {
    this._call = call;
  }

  get inputVector(): Array<UploadImageChunkCallInputVectorStruct> {
    return this._call.inputValues[0].value.toTupleArray<UploadImageChunkCallInputVectorStruct>();
  }

  get imageId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get chunkIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UploadImageChunkCall__Outputs {
  _call: UploadImageChunkCall;

  constructor(call: UploadImageChunkCall) {
    this._call = call;
  }
}

export class UploadImageChunkCallInputVectorStruct extends ethereum.Tuple {
  get data(): Bytes {
    return this[0].toBytes();
  }

  get securityZone(): i32 {
    return this[1].toI32();
  }
}
